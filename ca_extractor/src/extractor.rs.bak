use reqwest;
use xml::reader::{EventReader, XmlEvent};

use crate::cli::ServiceType;
use crate::error::CaExtractorError;

pub struct CertificateExtractor {
    country: String,
}

impl CertificateExtractor {
    pub fn new(_service: ServiceType, country: &str) -> Result<Self, CaExtractorError> {
        // Validate country code (simple check for now)
        if country.len() != 2 {
            return Err(CaExtractorError::InvalidCountryCode(
                format!("Invalid country code '{}'. Must be a 2-letter ISO country code.", country)
            ));
        }

        Ok(CertificateExtractor {
            country: country.to_string(),
        })
    }
    
    pub fn fetch_xml_content(&self) -> Result<String, CaExtractorError> {
        let url = format!(
            "https://eidas.ec.europa.eu/efda/tl-browser/api/v1/browser/download/{}",
            self.country
        );

        println!("Fetching from URL: {}", url);
        
        let client = reqwest::blocking::Client::builder()
            .timeout(std::time::Duration::from_secs(120))
            .build()?;
            
        let response = client.get(&url).send()?;
        let status = response.status();
        
        // Store the content type before consuming the response with text()
        let content_type = response.headers()
            .get(reqwest::header::CONTENT_TYPE)
            .and_then(|v| v.to_str().ok())
            .unwrap_or("unknown")
            .to_string();
            
        if !status.is_success() {
            return Err(CaExtractorError::ApiError {
                status: status.as_u16(),
                message: format!("API returned error status: {}", status)
            });
        }
        
        println!("Received content type: {}", content_type);
        println!("Downloading XML content (this may take a while)...");
        
        // Now we can consume the response
        let content = match response.text() {
            Ok(text) => text,
            Err(e) => {
                eprintln!("Error reading response: {}", e);
                return Err(CaExtractorError::RequestError(e));
            }
        };
        
        // Check if it looks like XML
        if !content.trim().starts_with("<?xml") && !content.trim().starts_with("<") {
            println!("Warning: Response doesn't start with XML declaration");
            println!("First 100 chars of response: {}", &content.chars().take(100).collect::<String>());
        } else {
            println!("Successfully downloaded XML content ({} bytes)", content.len());
        }
        
        Ok(content)
    }
        
        if content_type.contains("json") {
            return Err(CaExtractorError::CertificateExtractionError(
                format!("API returned JSON instead of XML. Response starts with: {}", 
                    &content.chars().take(100).collect::<String>())
            ));
        }
        
        if !content.trim().starts_with("<?xml") && !content.trim().starts_with("<") {
            return Err(CaExtractorError::CertificateExtractionError(
                format!("Invalid XML response. Response starts with: {}", 
                    &content.chars().take(100).collect::<String>())
            ));
        }
        
        Ok(content)
    }
    
    pub fn extract_certificates(&self, xml_content: &str) -> Result<Vec<String>, CaExtractorError> {
        // First check if the content is valid XML
        if !xml_content.trim().starts_with("<?xml") && !xml_content.trim().starts_with("<") {
            if xml_content.trim().starts_with("{") || xml_content.trim().starts_with("[") {
                return Err(CaExtractorError::InvalidResponseFormat(
                    format!("API returned non-XML content: {}", 
                            &xml_content.chars().take(100).collect::<String>())
                ));
            }
            
            return Err(CaExtractorError::InvalidResponseFormat(
                format!("API returned unrecognized content: {}", 
                        &xml_content.chars().take(100).collect::<String>())
            ));
        }
        
        let parser = EventReader::new(xml_content.as_bytes());
        let mut current_element = String::new();
        let mut elements = Vec::new();

        for event in parser {
            match event? {
                XmlEvent::StartElement { name, .. } => {
                    current_element = name.local_name;
                }
                XmlEvent::Characters(content) if current_element == "TSPService" => {
                    elements.push(content);
                }
                XmlEvent::EndElement { .. } => {
                    current_element.clear();
                }
                _ => {}
            }
        }
        
        let mut certificates = Vec::new();
        
        for element in elements {
            if let Some(cert_start) = element.find("<tsl:X509Certificate>") {
                if let Some(cert_end) = element.find("</tsl:X509Certificate>") {
                    let cert_content = &element[cert_start + 19..cert_end].trim().replace([' ', '\n'], "");

                    let wrapped_cert_str = format!(
                        "-----BEGIN CERTIFICATE-----\n{}\n-----END CERTIFICATE-----\n",
                        cert_content
                            .as_bytes()
                            .chunks(64)
                            .map(|chunk| std::str::from_utf8(chunk).unwrap())
                            .collect::<Vec<&str>>()
                            .join("\n")
                    );
                    
                    certificates.push(wrapped_cert_str);
                }
            }
        }
        
        if certificates.is_empty() {
            return Err(CaExtractorError::CertificateExtractionError(
                "No certificates found in the XML content".to_string()));
        }
        
        Ok(certificates)
    }
}
